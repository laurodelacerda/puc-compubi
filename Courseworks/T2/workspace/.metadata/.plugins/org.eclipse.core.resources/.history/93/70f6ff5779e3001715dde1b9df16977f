package br.pucrio.inf.lac;

import java.awt.font.NumericShaper;
import java.time.Duration;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Vector;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

public class Competitor {

	
	// Competitors
    String[] competitors_names = {"Lauro", "Sheriton", "Guilherme", "Miguel", "Micaele"};
    List<String> names = Arrays.asList(competitors_names);
	private String competitor_name;
	

	// Checkpoints
	private Instant competitor_start_time;
    private List<String> checkpointList = new ArrayList<String>();
 	private int currentCheckpoint;
 		   
    // This competitor's location info
    private static Vector<Coordinates> coordinates = new Vector<Coordinates>();
    
    // This competitor's perfomance
    private static List<Duration> checkpointTimes = new ArrayList<Duration>();
    private static Map<String, Duration> visitedCheckpoints = new HashMap<String, Duration>();
        
    // Constructor
	public Competitor(Instant start, String[] listOfCheckpoints)
	{
		//TODO start position ?
		competitor_name = generateName(names);	
		
		checkpointList = Arrays.asList(listOfCheckpoints);
		
		currentCheckpoint = 0;
		
		competitor_start_time = start;
		
	}
	
	
	
	public void collectLocationData(JSONObject object)
	{
    	Double latitude	 = (Double) object.get("latitude");
    	Double longitude = (Double) object.get("longitude");
    	
    	coordinates.add(new Coordinates(latitude, 
    									longitude));
    	    	
//    	System.out.println("Coordenadas de " + getName() + " : " 
//    						+ coordinates.lastElement().getLatitude() + "  |  "  
//    						+ coordinates.lastElement().getLongitude());
	}
	
	
	public int updatePerformance(JSONObject object)
	{	
		
		String checkpoint = (String) object.get("source");	
			
		
		if(checkpointList.get(currentCheckpoint).contains(checkpoint))
		{
			
			Long timestamp = (Long) object.get("timestamp");
			
			Instant checkpoint_time = Instant.ofEpochMilli(timestamp);
			
			Duration partial_time = Duration.between(competitor_start_time, checkpoint_time);
			
			checkpointTimes.add(partial_time);	
			
			visitedCheckpoints.put(checkpoint, partial_time);
					
			currentCheckpoint++;
			
			if(currentCheckpoint == checkpointList.size())
			{
				return -1;
			}
		}
		
		return currentCheckpoint;
		
	}
	
	
	
// ---------------------------------------------------------------------------------------------------
	
	/**
	 * Returns a random name
	 * @param myList
	 * @return
	 */
	private String generateName(List<String> myList)
	{
		
		Random randomizer = new Random();
		String name = myList.get(randomizer.nextInt(myList.size()));
		
		return name;
	}
	
		
	
	
// ---------------------------------------------------------------------------------------------------------------

// Public Getters and Setters
		
	public String getName()
	{
		return competitor_name;
	}
	
		
	public int getNumberOfCheckpoints()
	{
		return currentCheckpoint;
	}



	/**
	 * @return the visitedCheckpoints
	 */
	public Duration getLastCheckpointTime() 
	{
		return checkpointTimes.get(checkpointTimes.size() - 1);
	}
	
	public Map<String, Duration> getLastVisitedCheckpoint()
	{
		return visitedCheckpoints;
	}



	
	
	
}
